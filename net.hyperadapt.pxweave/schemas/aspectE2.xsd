<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.hyperadapt.net/pxweave/aspects" xmlns:tns="http://www.hyperadapt.net/pxweave/aspects" elementFormDefault="qualified">

	<element name="aspect" type="tns:Aspect" />
	<complexType name="Aspect">
		<sequence>
			<element name="interface" type="tns:Interface" />
			<element name="adviceGroup" minOccurs="1" maxOccurs="unbounded" type="tns:AdviceGroup">
				<annotation>
					<documentation xml:lang="de">gruppiert Advices, die zum gleichen Scope und Kontext gehören</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="name" type="string">
			<annotation>
				<documentation xml:lang="de">Name des Aspekts</documentation>
			</annotation>
		</attribute>
	</complexType>


	<complexType name="AdviceGroup">
		<sequence>
			<element name="depends" minOccurs="0" maxOccurs="1" type="tns:Dependency">
				<annotation>
					<documentation xml:lang="de">Evaluierung von Kontextvariablen um Gültigkeit der AdviceGroup festzulegen, Variablen über X-Path binden, boolscher Ausdruck</documentation>
				</annotation>
			</element>
			<element name="scope" minOccurs="1" maxOccurs="1" type="tns:Scope">
				<annotation>
					<documentation xml:lang="de">Gültigkeitsbereich der Advices</documentation>
				</annotation>
			</element>
			<element name="advices" type="tns:Advice" />
		</sequence>
	</complexType>

	<complexType name="Advice">
		<choice minOccurs="1" maxOccurs="unbounded">
			<annotation>
				<documentation xml:lang="de">1-n Advices; alle Advices müssen zumindest einen Joinpoint auswählen</documentation>
			</annotation>
			<element name="chooseVariant" type="tns:ChooseVariant">
				<annotation>
					<documentation xml:lang="de">Variantenauswahl: in n ElementNodes kann ein elementwertiger Kindknoten (joinPoint zeigt auf kindknoten) gewählt werden, die restlichen Kindknoten der ElementNodes werden entfernt, sofern sie gneauso heißen wie der joinpoint.</documentation>
				</annotation>
			</element>
			<element name="changeOrder" type="tns:ChangeOrder">
				<annotation>
					<documentation xml:lang="de">Reihenfolge von KindKnoten (inkl.TextNodes) von n ElementNodes ändern</documentation>
				</annotation>
			</element>
			<element name="changeValue" type="tns:ChangeValue">
				<annotation>
					<documentation xml:lang="de">wählt n ElementNodes oder AttributeNodes aus, ersetzt alle textNodes (ergebnis ist immer genau ein textNode/joinPoint) im ElementNode durch den evaluierten Wert bzw. ersetzt alle AttributeValues durch den gegebenen Wert</documentation>
				</annotation>
			</element>
			<element name="enrichContent" type="tns:EnrichContent">
				<annotation>
					<documentation xml:lang="de">fügt in n ElementNodes einen textNode an gewählter position ein</documentation>
				</annotation>
			</element>
			<element name="reduceContent" type="tns:ReduceContent">
				<annotation>
					<documentation xml:lang="de">wählt n ElementNodes aus, enfernt alle textNodes oder den text aus allen textNodes, der in deletePart angegeben ist </documentation>
				</annotation>
			</element>
			<element name="collapseElement" type="tns:CollapseElement">
				<annotation>
					<documentation xml:lang="de">ersetzt in n elementNodes alle kindKnoten durch einen textNode</documentation>
				</annotation>
			</element>
			<element name="expandElement" type="tns:ExpandElement">
				<annotation>
					<documentation xml:lang="de">ersetzt in n elementNodes die textNodes durch elementNode, dh. löscht alle textNodes, ersetzt sie durch einen elementNode</documentation>
				</annotation>
			</element>
			<element name="insertElement" type="tns:InsertElement">
				<annotation>
					<documentation xml:lang="de">Fügt in n ElementNodes ein generierten ElementNode an der gewählten Position als KindKnoten ein, der JoinPoint ist über $joinPoint im elementTemplate verfügbar - für jeden JoinPoint kann ein spezifisches Element generiert werden</documentation>
				</annotation>
			</element>
			<element name="moveElement" type="tns:MoveElement">
				<annotation>
					<documentation xml:lang="de">genau einen ElementNode auschneiden und als Kindelement eines ElementKnotens wieder einfügen, Ziel muss nicht im scope liegen, Quelle darf im Ziel nicht enthalten sein, Quelle und Ziel müssen unterschiedlich sein, Position des Neuen Kindknotens wird über Attribut Position (0.-n.pos) bestimmt->anhängen falls negativ</documentation>
				</annotation>
			</element>
			<element name="delete" type="tns:Delete">
				<annotation>
					<documentation xml:lang="de">n AttributeNodes, ElementNodes oder TextNodes entfernen</documentation>
				</annotation>
			</element>
			<element name="fillComponentById" type="tns:FillComponentByID">
				<annotation>
					<documentation xml:lang="de">fügt in die gewählten joinPoints die Kinder aus einem korrespondierendem source node. der source node wird anhand eines joinPoin-attributs targetID und eines source node attributs sourceID gefunden. joinPoint und source müssen elementNodes sein, für jeden joinPoint muss es genau einen source node geben</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>

	<!--******************************************* abstrakte Advices ********************************************** -->


	<complexType name="BasicAdvice" abstract="true">
		<annotation>
			<documentation xml:lang="de">Advice ohne "Value"-Angaben, nur Löschen/Sortieren/Auswählen von Content</documentation>
		</annotation>
		<sequence>
			<element name="pointcut" type="tns:XPath" />
		</sequence>
	</complexType>

	<complexType name="SimpleAdvice" abstract="true">
		<annotation>
			<documentation xml:lang="de">SimpleValue erlaubt das Erzeugen von textContent</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:BasicAdvice">
				<sequence>
					<element name="value" type="tns:SimpleValue" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="ComplexAdvice" abstract="true">
		<annotation>
			<documentation xml:lang="de">ComplexValue erlaubt das Erzeugen eines elementNodes</documentation>
		</annotation>
		<complexContent>
			<extension base="tns:BasicAdvice">
				<sequence>
					<element name="value" type="tns:ComplexValue" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>


	<!--******************************************** konkrete Advices *********************************************** -->
	<complexType name="FillComponentByID">
		<complexContent>
			<extension base="tns:BasicAdvice">
				<sequence>
					<group ref="tns:componentGroup" />
					<element name="source" type="tns:SourceContainer" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<group name="componentGroup">
		<sequence>
			<element name="identifyingAttribute" type="string" />
		</sequence>
	</group>

	<complexType name="SourceContainer">
		<sequence>
			<element name="sourceComponents" type="tns:XPath" />
			<group ref="tns:componentGroup" />
		</sequence>
		<attribute name="document" type="tns:Name" />
	</complexType>

	<complexType name="ChangeOrder">
		<complexContent>
			<extension base="tns:BasicAdvice">
				<choice>
					<element name="sortByName">
						<annotation>
							<documentation xml:lang="de">by attr</documentation>
						</annotation>
					</element>
					<element name="reverseOrder" />
					<element name="permutation" type="tns:Permutation">
						<annotation>
							<documentation xml:lang="de">Permutation gibt neue Reihenfolge der Elemente an</documentation>
						</annotation>
					</element>
				</choice>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="ChooseVariant">
		<complexContent>
			<extension base="tns:BasicAdvice" />
		</complexContent>
	</complexType>

	<complexType name="Delete">
		<complexContent>
			<extension base="tns:BasicAdvice" />
		</complexContent>
	</complexType>

	<complexType name="ReduceContent">
		<complexContent>
			<extension base="tns:BasicAdvice">
				<attribute name="deletePart" type="string" />
			</extension>
		</complexContent>
	</complexType>

	<complexType name="ChangeValue">
		<complexContent>
			<extension base="tns:SimpleAdvice" />
		</complexContent>
	</complexType>

	<complexType name="EnrichContent">
		<complexContent>
			<extension base="tns:SimpleAdvice">
				<attribute name="position" type="integer" />
			</extension>
		</complexContent>
	</complexType>

	<complexType name="CollapseElement">
		<complexContent>
			<extension base="tns:SimpleAdvice" />
		</complexContent>
	</complexType>


	<complexType name="ExpandElement">
		<complexContent>
			<extension base="tns:ComplexAdvice" />
		</complexContent>
	</complexType>

	<complexType name="InsertElement">
		<complexContent>
			<extension base="tns:ComplexAdvice">
				<attribute name="position" type="integer" use="required" />
			</extension>
		</complexContent>
	</complexType>

	<complexType name="MoveElement">
		<complexContent>
			<extension base="tns:BasicAdvice">
				<sequence>
					<element name="to" type="tns:XPath" />
				</sequence>
				<attribute name="position" type="integer" use="required" />
			</extension>
		</complexContent>
	</complexType>



	<!--******************************************** sonstiges *************************************************** -->
	<complexType name="Interface">
		<sequence>
			<element name="core" type="tns:Parameter">
				<annotation>
					<documentation xml:lang="de">ID und Typ (XSD) des Core-Dokuments</documentation>
				</annotation>
			</element>
			<element name="contextParameters" minOccurs="0" maxOccurs="1" type="tns:ContextVarDecl" />
			<element name="documentParameters" minOccurs="0" maxOccurs="1" type="tns:DocumentParameterDecl" />
			<element name="aspectOrder" type="tns:AspectOrder" minOccurs="0" maxOccurs="1" />
		</sequence>
	</complexType>

	<complexType name="Scope">
		<sequence>
			<element name="xpath" type="tns:XPath" minOccurs="0" maxOccurs="unbounded" />
			<element name="joinpoint" type="tns:ProgrammaticScope" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>

	<complexType name="AspectOrder">
		<sequence>
			<element name="afterAspect" type="string" minOccurs="0" maxOccurs="unbounded" />
			<element name="beforeAspect" type="string" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
		<attribute name="absolutePosition" type="tns:AbsolutePosition" default="none" />
	</complexType>

	<simpleType name="AbsolutePosition">
		<restriction base="string">
			<enumeration value="asFirst" />
			<enumeration value="asLast" />
			<enumeration value="none" />
		</restriction>
	</simpleType>

	<simpleType name="AdviceLocator">
		<restriction base="string">
			<enumeration value="before" />
			<enumeration value="after" />
		</restriction>
	</simpleType>

	<complexType name="XPath">
		<simpleContent>
			<extension base="string">
				<!-- <attribute name="type" type="tns:TypeDef" use="required"/> -->
				<attribute name="root" type="string" />
			</extension>
		</simpleContent>
	</complexType>

	<!-- inserted by skarol -->
	<complexType name="ProgrammaticScope" abstract="false">
		<attribute name="name" type="string" />
		<attribute name="locator" type="tns:AdviceLocator" />
	</complexType>

	<simpleType name="Permutation">
		<restriction base="string">
			<!--Tupelschreibweise der Permutation: (1 4 3 2 5) -->
			<pattern value="\(([1-9][0-9]*\s)+(([1-9][0-9]*))+\)" />
		</restriction>

	</simpleType>

	<complexType name="Parameter">
		<attribute name="id" type="string" use="required" />
		<attribute name="type" type="string" use="required" />
	</complexType>

	<complexType name="Dependency">
		<sequence>
			<element name="boolExpr" type="string">
				<annotation>
					<documentation xml:lang="de">boolscher Ausdruck über ausgewählte Parameter</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>

	<complexType name="SimpleValue">
		<annotation>
			<documentation xml:lang="de">für konkrete Avices, die nur textwertige Änderungen vornehmen</documentation>
		</annotation>
		<sequence>
			<element name="varDecl" type="tns:VarDecl" minOccurs="0" />
			<element name="textTemplate" type="tns:TextTemplate" />
		</sequence>
	</complexType>

	<complexType name="ComplexValue">
		<annotation>
			<documentation xml:lang="de">für konkrete Avices, die ein Element erzeugen müssen</documentation>
		</annotation>
		<sequence>
			<element name="varDecl" type="tns:VarDecl" minOccurs="0" />
			<element name="elementTemplate" type="tns:ElementTemplate" />
		</sequence>
	</complexType>

	<complexType name="TextTemplate">
		<simpleContent>
			<extension base="string" />
		</simpleContent>
	</complexType>

	<complexType name="ElementTemplate" mixed="true">
		<sequence minOccurs="1" maxOccurs="1">
			<any processContents="skip" />
		</sequence>
	</complexType>

	<complexType name="VarDecl">
		<sequence>
			<element name="var" maxOccurs="unbounded" type="tns:Var" />
		</sequence>
	</complexType>

	<complexType name="ContextVarDecl">
		<sequence>
			<element name="parameter" minOccurs="1" maxOccurs="unbounded" type="tns:ContextParameter" />
		</sequence>
	</complexType>

	<complexType name="DocumentParameterDecl">
		<sequence>
			<element name="documentParameter" maxOccurs="unbounded" type="tns:DocumentParameter" />
		</sequence>
	</complexType>

	<complexType name="ContextParameter">
		<sequence>
			<element name="name" type="tns:Name" />
		</sequence>
		<!--<attribute name="type" type="tns:TypeDefContextParam" use="required"/> -->
	</complexType>

	<complexType name="DocumentParameter">
		<sequence>
			<element name="name" type="tns:Name" />
			<element name="uri" type="anyURI" />
		</sequence>
	</complexType>

	<complexType name="Var">
		<sequence>
			<element name="name" type="tns:Name" />
			<element name="xpath" type="tns:XPath" />
		</sequence>
		<!-- <attribute name="type" type="tns:TypeDef" use="required"/> -->
	</complexType>

	<simpleType name="TypeDef">
		<restriction base="string">
			<enumeration value="integer" />
			<enumeration value="double" />
			<enumeration value="float" />
			<enumeration value="short" />
			<enumeration value="string" />
			<enumeration value="boolean" />
			<enumeration value="elementNode" />
		</restriction>
	</simpleType>

	<simpleType name="TypeDefContextParam">
		<restriction base="string">
			<enumeration value="integer" />
			<enumeration value="double" />
			<enumeration value="float" />
			<enumeration value="short" />
			<enumeration value="string" />
			<enumeration value="boolean" />
		</restriction>
	</simpleType>

	<simpleType name="Name">
		<restriction base="string">
			<pattern value="[a-zA-Z]\w*" />
		</restriction>
	</simpleType>

</schema>